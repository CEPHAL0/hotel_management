openapi: 3.0.0
info:
  title: Hotel Management System API
  version: 1.0.0
  description: API documentation for the Hotel Management System

servers:
  - url: /api
    description: API base URL

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [admin, user]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    Success:
      type: object
      properties:
        status:
          type: string
          enum: [success]
        message:
          type: string
        data:
          type: object

paths:
  /auth/login:
    post:
      summary: User login
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      summary: User registration
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              $ref: '#/components/schemas/Error'

  /profile:
    get:
      summary: Get user profile
      tags: [Profile]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              $ref: '#/components/schemas/Error'

    put:
      summary: Update user profile
      tags: [Profile]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email]
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              $ref: '#/components/schemas/Error'

  /profile/change-password:
    post:
      summary: Change user password
      tags: [Profile]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  message:
                    type: string
        '400':
          description: Validation error or incorrect current password
          content:
            application/json:
              $ref: '#/components/schemas/Error'

  /admin/users:
    get:
      summary: Get all admin users
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              $ref: '#/components/schemas/Error'

    post:
      summary: Create a new admin user
      tags: [Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '201':
          description: Admin user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              $ref: '#/components/schemas/Error'

  /admin/users/{id}:
    put:
      summary: Update an admin user
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email]
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Admin user updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              $ref: '#/components/schemas/Error'

    delete:
      summary: Delete an admin user
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Admin user deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  message:
                    type: string
        '400':
          description: Cannot delete the last admin user
          content:
            application/json:
              $ref: '#/components/schemas/Error'

  /dashboard:
    get:
      summary: Get dashboard statistics
      tags: [Dashboard]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      bookingsByType:
                        type: array
                        items:
                          type: object
                          properties:
                            status:
                              type: string
                            count:
                              type: integer
                      totalBookings:
                        type: integer
                      totalRevenue:
                        type: number
                      staysByStatus:
                        type: array
                        items:
                          type: object
                          properties:
                            status:
                              type: string
                            count:
                              type: integer
                      roomsByStatus:
                        type: array
                        items:
                          type: object
                          properties:
                            status:
                              type: string
                            count:
                              type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              $ref: '#/components/schemas/Error'

  /payments:
    get:
      summary: Get payment history
      tags: [Payments]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Payment history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      payments:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            amount:
                              type: number
                            status:
                              type: string
                            createdAt:
                              type: string
                              format: date-time
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                          page:
                            type: integer
                          limit:
                            type: integer
                          pages:
                            type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              $ref: '#/components/schemas/Error'

  /payments/{id}:
    get:
      summary: Get payment details
      tags: [Payments]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Payment details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      amount:
                        type: number
                      status:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '401':
          description: Unauthorized
          content:
            application/json:
              $ref: '#/components/schemas/Error' 